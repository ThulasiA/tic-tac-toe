{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","react_default","a","createElement","className","isWinning","onClick","value","Board","i","_this","this","components_Square","winningSquares","includes","squares","row","j","push","renderSquare","key","React","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","winner","line","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","setState","concat","location","step","status","_this2","current","moves","map","move","desc","classname","hopTo","reverse","components_Board","handleClick","handleToggle","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.f51e7503.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className={\"square \" + (props.isWinning ? \"square--won\" : \"\")}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        isWinning={this.props.winningSquares.includes(i)}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // Refactoring - Turning hard coded renderSquare to 2 for loops\r\n    let squares = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        row.push(this.renderSquare(i * 3 + j));\r\n      }\r\n      squares.push(\r\n        <div key={i} className=\"board-row\">\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return <div> {squares} </div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nclass Game extends React.Component {\r\n  /* Refactoring state to React 16 */\r\n\r\n  state = {\r\n    history: [\r\n      {\r\n        squares: Array(9).fill(null)\r\n      }\r\n    ],\r\n    stepNumber: 0,\r\n    xIsNext: true,\r\n    isAscending: true\r\n  };\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     history: [\r\n  //       {\r\n  //         squares: Array(9).fill(null)\r\n  //       }\r\n  //     ],\r\n  //     stepNumber: 0,\r\n  //     xIsNext: true\r\n  //   };\r\n  // }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const locations = [\r\n      [1, 1],\r\n      [2, 1],\r\n      [3, 1],\r\n      [1, 2],\r\n      [2, 2],\r\n      [3, 2],\r\n      [1, 3],\r\n      [2, 3],\r\n      [3, 3]\r\n    ];\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([{ squares: squares, location: locations[i] }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  hopTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    });\r\n  }\r\n\r\n  handleToggle() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber]; //history[history.length - 1];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    let status;\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move\r\n        ? `Go to step #${move} at C${history[move].location[0]} R\r\n          ${history[move].location[1]}`\r\n        : `Go back to start`;\r\n      const classname =\r\n        move === this.state.stepNumber ? `button-selected-bold` : `button-move`;\r\n      return (\r\n        <li key={move}>\r\n          <button className={`${classname}`} onClick={() => this.hopTo(move)}>\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if (winner) {\r\n      status = \"Winner is \" + winner.winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    const isAscending = this.state.isAscending;\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            winningSquares={winner ? winner.line : []}\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div className=\"status\">{status}</div>\r\n          <button className=\"btn-toggle\" onClick={() => this.handleToggle()}>\r\n            {isAscending ? \"Sort Descendingly\" : \"Sort Ascendingly\"}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { winner: squares[a], line: [a, b, c] };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from './components/Game';\r\nimport \"./index.css\";\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}